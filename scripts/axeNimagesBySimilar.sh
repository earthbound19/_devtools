# DESCRIPTION
# Moves files in the current directory, as listed by file `IMGlistByMostSimilar.txt`, into subfolders in groups of $1 files per folder. `IMGlistByMostSimilar.txt` can be generated by the script `imgsGetSimilar.sh` (and re-sorted by `re_sort_imgsMostSimilar.sh`), and is intended to list files by next most similar image. Also splits `IMGlistByMostSimilar.txt` into copies in the subfolders, these partitioned text file copies reflecting the files in the subfolders. The intent is to group images that are found to be similar (as listed by the mentioned script and .txt file) into subfolders of N similar images. Meaning, it takes the first $1 ('N') files from that list, moves those into a subfolder, then takes the next N files and moves them to another subfolder, and so on, until they have all been moved into subfolders.

# DEPENDENCIES
# `IMGlistByMostSimilar.txt`, as created by `imgsGetSimilar.sh`

# USAGE
# With this script in your PATH, and the listed dependency file in the folder you run this script from, run it with these parameters:
# - $1 how many files from the list `IMGlistByMostSimilar.txt` to move into each subfolder
# - $2 OPTIONAL. Prefix name for folders. If not provided, defaults to `_toEndFR_`.


# CODE

# ====
# BEGIN SET GLOBALS
# Parse for parameters and set defaults for missing ones\; if they are present\, use them.
if [ ! "$1" ]; then printf "\nNo parameter \$1 (number of similar images to sort into each folder) passed to script. Exit."; exit 1; else numberToAxeOn=$1; fi

folderPrefix=_toEndFR_
if [ "$2" ]
then
	folderPrefix=$2; echo folderPrefix set to parameter \$2\, $2\.
fi
# ====
# END SET GLOBALS

# check for IMGlistByMostSimilar.txt and error out if it is not found.
if [ ! -f IMGlistByMostSimilar.txt ]; then echo "ERROR! Dependency file IMGlistByMostSimilar.txt (to be created by imgsGetSimilar.sh) does not exist. Exit."; exit 3; fi

# Count number of files listed in IMGlistByMostSimilar.txt, so we can figure out how many 0 columns to pad numbers with via printf:
numberOfFiles=$(cat IMGlistByMostSimilar.txt | wc -l)
		echo "Found $numberOfFiles lines in IMGlistByMostSimilar.txt; assuming that is the number of files."
padToDigits=${#numberOfFiles}
		echo Will pad numbers in folder names to $padToDigits digits.

# MAIN LOGIC
# Figure out how many folders we'll need to create to move $numberToAxeOn into each:
n=$(($numberOfFiles / $numberToAxeOn+1))
# Variables used in the coming control block to break up lines of a text file (created by and useful for other scripts) into partitioned copies of it in created subfolders:
linesCPmultiplier=1
linesCPStartAtMultiple=1
# For folder name by number zero-padding digits:
highestAxeFolderNumberWillBe=$(($n * $numberToAxeOn))
folderNumberDigitsPadding=${#highestAxeFolderNumberWillBe}

for i in $(seq 0 $numberOfFiles)
do
#	echo $i
	if [ $(($i % $numberToAxeOn)) == 0 ]
	then
		toEndFrameMultiple=$(( $toEndFrameMultiple + $numberToAxeOn))

	paddedToEndFrameMultiple=$(printf "%0"$folderNumberDigitsPadding"d" $toEndFrameMultiple)
	folderName=$folderPrefix"$paddedToEndFrameMultiple"
	if [ $i == 1 ]; then helpFirstFolderName=$folderName; fi    # Store first folder name in variable for later help text.
	echo "Current operating subfolder is $folderName."
	if ! [ -d $folderName ]; then mkdir $folderName; fi

	# create partitioned (subsectioned) copy of IMGlistByMostSimilar.txt in operating axe subfolder. 
	tail -n+$linesCPStartAtMultiple IMGlistByMostSimilar.txt | head -n$numberToAxeOn > $folderName/IMGlistByMostSimilar.txt
	linesCPStartAtMultiple=$(( ($linesCPmultiplier * $numberToAxeOn) + 1))
	linesCPmultiplier=$(($linesCPmultiplier + 1))

	# read that subsection list into an array (getting file names via text filtering) and move the files in it into that subfolder:
	filesToMove=( $(sed "s/file '\(.*\)'/\1/g" $folderName/IMGlistByMostSimilar.txt) )
	for fileName in ${filesToMove[@]}
	do
		echo moving $fileName to $folderName . . .
		mv $fileName ./$folderName
	done

	fi
done

echo "DONE. All files in this folder of type $fileExt have been axed by count $numberToAxeOn into folders named starting $helpFirstFolderName and ending $folderName (if those are both the same folder name, there may not have been any point to running this script with the parameters you did: all files ended up in one subfolder only, because you axed the number of files you had to begin with)."