# DESCRIPTION
# Prints N shades of gray (parameter 1) as calculated in the RGB color space, only for comparison to any grayscale palette generated by getNshadesOfColorCIECAM02.py. You don't want to use the output of this script, because RGB math doesn't align well with human perception of light/dark/nearness of colors. You want to use getNshadesOfColorCIECAM02.py, because the color space it uses is superior for perceptual grayscale and color shade palette generation.

# USAGE
# Run this script through a Python interpeter with one parameter, which is the number of shades of gray you want to print in hex-encoded RGB values. For example, this will print 16 shades of gray:
#    python /path/to_this_script/getNshadesOfGrayRGB.py 16
# To write the printout to a file, use the > operator, like this:
#    python /path/to_this_script/getNshadesOfGrayRGB.py 16 > 18shadesOfGrayRGB.hexplt


# CODE
import sys
import numpy as np
from colormap import rgb2hex	# which also needs easydev (pip install easydev)
import ast

RGB_min = 0
RGB_max = 255
steps = ast.literal_eval(sys.argv[1])	# EXPECTS numeric parameter as only parameter to script!
c = 0
h = 0

graysRGB = []
# Thanks to help here: https://stackoverflow.com/a/7267806/1397555
descending_RGB_val = np.linspace(RGB_max, RGB_min, num=steps)
for RGB in descending_RGB_val:
    graysRGB.append(rgb2hex(int(RGB), int(RGB), int(RGB)))

# Deduplicate list but maintain order; re: https://stackoverflow.com/a/17016257/1397555
from more_itertools import unique_everseen
graysRGB = list(unique_everseen(graysRGB))

for element in graysRGB:
	print(element)