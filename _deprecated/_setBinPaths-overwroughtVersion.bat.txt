REM DESCRIPTION: _setBinPaths.bat adds custom paths to the system PATH (Windows). [DESCRIBE MORE WHEN THIS SCRIPT IS DONE.] SEE IMPORTANT NOTES IN COMMENTS (everything after any line that says REM). Reads from BINPATHS.txt and EXTERNALPATHS.txt, which you may populate with custom paths, one per line, no semicolon. Adds the paths in those files to the system PATH variable (Windows), and optionally deletes invalid paths, using the modpath.exe utility.
REM I release this work to the Public Domain. 09/24/2015 09:18:03 PM -RAH

REM I just realized why I discarded this. During programming, when this wasn't working properly, it was adding repeat entries to the system's PATH, which I unwisely assumed the modpath.exe tool and/or Windows would not allow. Since this first reads those and then writes them back, but in a buggy iteration was writing multiple back, I thought there was a bug; well there was, but when I had this script's logic proper and nobody in the history of the world should care enough about this to read this. 09/24/2015 10:43:37 PM -RAH

ECHO OFF

IF EXIST setPathsLog.txt DEL setPathsLog.txt
IF EXIST allPathsTemp.txt DEL allPathsTemp.txt
IF EXIST temp1.txt DEL temp1.txt
IF EXIST temp2.txt DEL temp2.txt

	REM Store the path *before* we alter it for the remainder of this script to work (and the remainder of that script uses temp1.txt) :
ECHO %PATH% > temp1.txt
SET PATH=C:\_devtools\bin;C:\_devtools\bin\gnuCoreUtilsWin32;%PATH%
	REM I struggled for too long trying to use other tools or commands to delete a newline produced if I use the following "type" command *after* the ECHO command. Nothing seemed to work, and then I tried reversing the commands and adding a newline to BINPATHS.txt and bingo! Formatted as I want and no extra newline. 09/24/2015 05:38:30 PM -RAH
ECHO Doing text manipulation stuff . . .
type BINPATHS.txt >> temp1.txt
REM NEXT LINE OPTIONAL:
REM type EXTERNALPATHS.txt >> temp1.txt
	REM Remove any extraneous carriage returns/newlines:
REM tr ";" "\n" temp1.txt > temp2.txt
REM tr -d "\r" < temp2.txt > temp1.txt
REM tr -d "\n" < temp2.txt > temp1.txt
REM tr -d "\n" < temp1.txt > temp2.txt
			REM DEPRECATED buggy approach:
			REM sed -i "s/;;/;/g" temp1.txt
	REM I can't bring myself to upvote yon solution, because there should be simpler way! -- but it works! ; it replaces all newlines with a semicolon:
REM sed -i ":a;N;$!ba;s/\n/;/g" temp2.txt
				REM DEPRECATED as unecessary:
				REM It may not be necessary, and I don't understand why the prior command adds an extra space besides the newline:
		REM tr -d "\n " < temp1.txt > temp2.txt
				REM Delete the last semicolon in the result:
		REM sed -i s/\(.*\);/\1/g temp2.txt
				REM DEPRECATED: everything in this indent, and use of setenv. 
				REM Reason: I coded all this assuming that setenv adds/subtracts to the system PATH one variable at a time; BUT setenv actually sets the entire path in one go (one string, with all necessary semicolons); which I forgot: I choose to use modpath.exe instead.
	REM Replace all semicolons with newlines; we actually don't need them (or the path altering tool we'll use doesn't), they were there as delimiters to break up the line.
REM tr ';' '\n' < temp1.txt > temp2.txt
	REM the magic uniqify and sort commands:
REM uniq -u temp1.txt > temp2.txt
REM sort temp2.txt > allPathsTemp.txt
REM ECHO Ready to modify PATH.

REM FOR /F "delims=*" %%A IN (allPathsTemp.txt) DO (
REM IF NOT EXIST %%A ECHO Could not find path: %%A >> setPathsLog.txt
REM IF NOT EXIST %%A modpath /del %%A
REM IF NOT EXIST %%A ECHO Deleted invalid directory in PATH: %%A >> setPathsLog.txt
REM IF EXIST %%A ECHO Found path: %%A >> setPathsLog.txt
REM IF EXIST %%A modpath /add %%A
REM IF EXIST %%A ECHO Added directory to PATH: %%A
REM )

ECHO ==================== DONE ====================
ECHO NOTE: you may want to check setPathLogs.txt to see if there are any errors finding paths.
ECHO ==============================================
REM DEL allPathsTemp.txt

REM ===========
REM FAILS:
REM Delete any blank lines, which would mess with sorting:
REM sed -i -e "/^$/d" temp2.txt > temp1.txt
REM -except that isn't working. Dunno why. Many search. Much code. No cigar.

REM *Interesting:* produces double blank lines; re: http://www.pement.org/sed/sed1line.txt
REM sed "/^$/d;G" < temp2.txt > temp1.txt

REM avoid newlines with printf, remember?!
REM printf "Calculation for pair $element" >> imgSimilarities.txt
REM - neh, found workaround in comments of command lines here.

REM Related (or not, as the problem was solved) : http://stackoverflow.com/questions/7105433/windows-batch-echo-without-new-line